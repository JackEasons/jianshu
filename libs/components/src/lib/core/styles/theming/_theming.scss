@import "./palettes";
@import "./linear-channel-values";

// 对于调色板中的给定色相，从对比度调色板映射中返回对比度
// @param $color-map
// @param $hue
@function sim-contrast($palette, $hue) {
  @return map-get(map-get($palette, contrast), $hue);
}

// 为主题创建色调到颜色的映射。这是用来定义一个主题调色板的设计色调
// @param $color-map
// @param $primary
// @param $lighter
@function sim-palette($base-palette, $default: 500, $lighter: 100, $darker: 700, $text: $default) {
  $result: map_merge(
    $base-palette,
    (
      default: map-get($base-palette, $default),
      lighter: map-get($base-palette, $lighter),
      darker: map-get($base-palette, $darker),
      text: map-get($base-palette, $text),
      default-contrast: sim-contrast($base-palette, $default),
      lighter-contrast: sim-contrast($base-palette, $lighter),
      darker-contrast: sim-contrast($base-palette, $darker),
    )
  );

  // 对于调色板中的每个色相，向map添加一个“对比度”颜色
  @each $hue, $color in $base-palette {
    $result: map_merge(
      $result,
      (
        "#{$hue}-contrast": sim-contrast($base-palette, $hue),
      )
    );
  }

  @return $result;
}

@function sim-color($palette, $hue: default, $opacity: null) {
  // 如果hueKey是一个介于0和1之间的数字，那么它实际上包含了一个不透明度值，所以回忆一下这个默认色调和给定不透明度的函数。
  @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {
    @return sim-color($palette, default, $hue);
  }

  $color: map-get($palette, $hue);

  @if (type-of($color) != color) {
    // 如果$color解析为与颜色不同的内容(例如CSS变量)，
    // 我们不能应用不透明度，所以我们返回的值是原样，否则Sass可以抛出错误或输出无效的内容。
    @return $color;
  }

  @return rgba($color, if($opacity == null, opacity($color), $opacity));
}

@function _generate-color($color, $saturation) {
  @if ($saturation == 50) {
    @return lighten(saturate($color, 10.4), 37.7);
  } @else if ($saturation == 100) {
    @return lighten(desaturate($color, 10.4), 31.8);
  } @else if ($saturation == 200) {
    @return lighten(desaturate($color, 17), 18.7);
  } @else if ($saturation == 300) {
    @return lighten(desaturate($color, 12.9), 9.1);
  } @else if ($saturation == 400) {
    @return lighten(desaturate($color, 6.6), 4.1);
  } @else if ($saturation == 500) {
    @return $color;
  } @else if ($saturation == 600) {
    @return darken(saturate($color, 12.4), 5.1);
  } @else if ($saturation == 700) {
    @return darken(saturate($color, 24.5), 8.8);
  } @else if ($saturation == 800) {
    @return darken(saturate($color, 23.2), 12.7);
  } @else if ($saturation == 900) {
    @return darken(saturate($color, 16.1), 17);
  } @else if ($saturation == "A100") {
    @return lighten(saturate($color, 10.4), 16.7);
  } @else if ($saturation == "A200") {
    @return lighten(saturate($color, 10.4), 7.7);
  } @else if ($saturation == "A400") {
    @return darken(saturate($color, 10.4), 3.9);
  } @else if ($saturation == "A700") {
    @return darken(saturate($color, 10.4), 16.6);
  }
}

/// 将rgba颜色转换为十六进制颜色
/// @access public
/// @requires {function} to-string
/// @param {Color} $rgba - 要转换的rgba颜色
/// @param {Color} $background - 要转换的背景颜色
/// @return {Color} - rgba值的十六进制表示
@function hexrgba($rgba, $background: #fff) {
  @if type-of($rgba) == color {
    $red: red($rgba);
    $green: green($rgba);
    $blue: blue($rgba);
    $a: alpha($rgba);
    $r: floor($a * $red + (1 - $a) * red($background));
    $g: floor($a * $green + (1 - $a) * green($background));
    $b: floor($a * $blue + (1 - $a) * blue($background));
    @return rgb($r, $g, $b);
  }
  @return $rgba;
}

/// 计算给定颜色的亮度
/// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests.
///
/// @param {Color} $color - 用来计算亮度的颜色。
@function luminance($color) {
  @if type-of($color) == "color" {
    $red: nth($linear-channel-values, red($color) + 1);
    $green: nth($linear-channel-values, green($color) + 1);
    $blue: nth($linear-channel-values, blue($color) + 1);

    @return 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;
  }
  @return $color;
}

/// 计算两种颜色之间的对比度
/// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
///
/// @param {Color} $background - 背景颜色
/// @param {Color} $foreground - 前景颜色.
/// @returns {Number} - 背景色和前景色的对比度
@function contrast($background, $foreground) {
  $backLum: luminance($background) + 0.05;
  $foreLum: luminance($foreground) + 0.05;

  @return max($backLum, $foreLum) / min($backLum, $foreLum);
}

/// 返回传递的颜色的对比色
/// @access public
/// @group Palettes
/// @param {Color} $color - 用于返回对比色的颜色
/// @returns {Color} - 根据输入颜色的亮度返回白色或黑色
@function text-contrast($color) {
  @if type-of($color) == "color" {
    $lightContrast: contrast($color, white);
    $darkContrast: contrast($color, black);

    @if ($lightContrast > $darkContrast) {
      @return white;
    } @else {
      @return black;
    }
  }
  @return $color;
}

/// 从调色板中检索给定颜色的对比文本颜色
/// @access public
/// @group Palettes
/// @param {string} $color - 目标颜色来自调色板.
/// @param {number|variant} $variant - 目标颜色从调色板阴影.
/// @requires igx-color
/// @requires text-contrast
/// @requires hexrgba
/// @returns {Color} [#fff] - 返回白色，如果现在的调色板，颜色和/或变种匹配找到
@function _contrast-color($color, $variant: 500) {
  $_color: sim-color($color, $variant);
  @if $_color {
    @return text-contrast(hexrgba($_color));
  }
  @return #fff;
}

@function generate-palette($color, $saturations: (50, 100, 200, 300, 400, 500, 600, 700, 800, 900, "A100", "A200", "A400", "A700")) {
  $result: ();
  @each $saturation in $saturations {
    $shade: _generate-color($color, $saturation);
    $result: map-merge(
      $result,
      (
        $saturation: $shade,
      )
    );
  }
  $contrast: ();
  @each $saturation in $saturations {
    $shade: _contrast-color($result, $saturation);
    $contrast: map-merge(
      $contrast,
      (
        $saturation: $shade,
      )
    );
  }
  @return map-merge(
    $result,
    (
      contrast: $contrast,
    )
  );
}

// 创建一个容器对象，该对象用于将高亮主题指定给各个组件主题混合
@function sim-light-theme($primary, $secondary, $info: #3591fe, $success: #59c520, $warning: #f6ac1e, $danger: #ef0f30) {
  $info-palette: if(type-of($info) == "color", generate-palette($info), $info);
  $success-palette: if(type-of($success) == "color", generate-palette($success), $success);
  $warning-palette: if(type-of($warning) == "color", generate-palette($warning), $warning);
  $danger-palette: if(type-of($danger) == "color", generate-palette($danger), $danger);

  @return (
    primary: $primary,
    secondary: $secondary,
    grays: $sim-grey,
    info: $info-palette,
    success: $success-palette,
    warning: $warning-palette,
    danger: $danger-palette,
    is-dark: false,
    foreground: $sim-light-theme-foreground,
    background: $sim-light-theme-background
  );
}

// 创建一个容器对象，用于将暗主题指定给各个组件主题混合。
@function sim-dark-theme($primary, $secondary, $info: #3591fe, $success: #59c520, $warning: #f6ac1e, $danger: #ef0f30) {
  $info-palette: if(type-of($info) == "color", generate-palette($info), $info);
  $success-palette: if(type-of($success) == "color", generate-palette($success), $success);
  $warning-palette: if(type-of($warning) == "color", generate-palette($warning), $warning);
  $danger-palette: if(type-of($danger) == "color", generate-palette($danger), $danger);

  @return (
    primary: $primary,
    secondary: $secondary,
    grays: $sim-grey,
    info: $info-palette,
    success: $success-palette,
    warning: $warning-palette,
    danger: $danger-palette,
    is-dark: true,
    foreground: $sim-dark-theme-foreground,
    background: $sim-dark-theme-background
  );
}

$default-palette: sim-light-theme(
  $primary: sim-palette($sim-primary),
  $secondary: sim-palette($sim-secondary),
) !default;
